#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#populate the table - conditions
conditions_df <-data.frame(condition = unique(df$sky_conditions))
conditions_df <- cbind(cid = 1:nrow(conditions_df), conditions_df)
conditions_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
library(ggplot2)
query <- "
SELECT YEAR(date) as year, COUNT(*) as incidentsNumber
FROM incidents
WHERE YEAR(date) BETWEEN 2005 AND 2011
GROUP BY year;"
incidentsYearly <- dbGetQuery(dbcon, query)
ggplot(incidentsYearly, aes(x = year, y = incidentsNumber))  + geom_col() + labs(title = "Incidents Number from 2005 to 2011", x = "Year", y = "Number of Incidents")
#re-define the pilot value
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- TRUE
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- FALSE
#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
library(ggplot2)
query <- "
SELECT YEAR(date) as year, COUNT(*) as incidentsNumber
FROM incidents
WHERE YEAR(date) BETWEEN 2005 AND 2011
GROUP BY year;"
incidentsYearly <- dbGetQuery(dbcon, query)
ggplot(incidentsYearly, aes(x = year, y = incidentsNumber))  + geom_col() + labs(title = "Incidents Number from 2005 to 2011", x = "Year", y = "Number of Incidents")
dbDisconnect(dbcon)
library(DBI)
library(RMySQL)
library(dplyr)
db_user <- 'root'
db_password <- rstudioapi::askForPassword()
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
dbcon <-  dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
library(DBI)
library(RMySQL)
library(dplyr)
db_user <- 'root'
db_password <- rstudioapi::askForPassword()
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
dbcon <-  dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
library(DBI)
library(RMySQL)
library(dplyr)
db_user <- 'root'
db_password <- rstudioapi::askForPassword()
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
dbcon <-  dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
#Load the Bird Strikes CSV file.
df <- read.csv("BirdStrikesData-V2.csv", header = TRUE, stringsAsFactors = FALSE)
unique(df$flight_phase)
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
df$flight_phase[df$flight_phase == "Climb"] <- "takeoff"
df$flight_phase[df$flight_phase == "Take-off run"] <- "takeoff"
df$flight_phase[df$flight_phase == "Landing Roll"] <- "landing"
df$flight_phase[df$flight_phase == "Approach"] <- "landing"
df$flight_phase[df$flight_phase == "Descent"] <- "inflight"
df$flight_phase[df$flight_phase == "Taxi"] <- "unknown"
df$flight_phase[df$flight_phase == "Parked"] <- "unknown"
df$flight_phase[df$flight_phase == ""] <- "unknown"
df <- df[!(grepl("MILITARY", df$airline)), ]
#remove records that has no flight information
df <- df[complete.cases(df),]
#add value "unknown" for empty airport and airline
df$airport <- ifelse(is.na(df$airport), "unknown", df$airport)
df$airline <- ifelse(is.na(df$airline), "unknown", df$airline)
#re-define the pilot value
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- TRUE
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- FALSE
#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#populate the table - conditions
conditions_df <-data.frame(condition = unique(df$sky_conditions))
conditions_df <- cbind(cid = 1:nrow(conditions_df), conditions_df)
conditions_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
#Load the Bird Strikes CSV file.
df <- read.csv("BirdStrikesData-V2.csv", header = TRUE, stringsAsFactors = FALSE)
unique(df$flight_phase)
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
df$flight_phase[df$flight_phase == "Climb"] <- "takeoff"
df$flight_phase[df$flight_phase == "Take-off run"] <- "takeoff"
df$flight_phase[df$flight_phase == "Landing Roll"] <- "landing"
df$flight_phase[df$flight_phase == "Approach"] <- "landing"
df$flight_phase[df$flight_phase == "Descent"] <- "inflight"
df$flight_phase[df$flight_phase == "Taxi"] <- "unknown"
df$flight_phase[df$flight_phase == "Parked"] <- "unknown"
df$flight_phase[df$flight_phase == ""] <- "unknown"
df <- df[!(grepl("MILITARY", df$airline)), ]
#remove records that has no flight information
df <- df[complete.cases(df),]
#add value "unknown" for empty airport and airline
df$airport <- ifelse(is.na(df$airport), "unknown", df$airport)
df$airline <- ifelse(is.na(df$airline), "unknown", df$airline)
#re-define the pilot value
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- TRUE
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- FALSE
#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#populate the table - conditions
conditions_df <-data.frame(condition = unique(df$sky_conditions))
conditions_df <- cbind(cid = 1:nrow(conditions_df), conditions_df)
conditions_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
1-G:Remove all military flights
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#add value "unknown" for empty airport and airline
incidents_df$airport <- ifelse(is.na(incidents_df$airport), "unknown", incidents_df$airport)
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#add value "unknown" for empty airport and airline
incidents_df$origin <- ifelse(is.na(incidents_df$origin), "unknown", incidents_df$origin)
incidents_df$airline <- ifelse(is.na(incidents_df$airline), "unknown", incidents_df$airline)
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#add value "unknown" for empty airport and airline
incidents_df$origin <- ifelse(is.na(incidents_df$origin), "unknown", incidents_df$origin)
incidents_df$airline <- ifelse(is.na(incidents_df$airline), "unknown", incidents_df$airline)
#re-define the pilot value
incidents_df$flightPhase[incidents_df$flightPhase == "Y"] <- TRUE
incidents_df$flightPhase[incidents_df$flightPhase == "N"] <- FALSE
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
#Load the Bird Strikes CSV file.
df <- read.csv("BirdStrikesData-V2.csv", header = TRUE, stringsAsFactors = FALSE)
#Load the Bird Strikes CSV file.
df <- read.csv("BirdStrikesData-V2.csv", header = TRUE, stringsAsFactors = FALSE)
unique(df$flight_phase)
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
df$flight_phase[df$flight_phase == "Climb"] <- "takeoff"
df$flight_phase[df$flight_phase == "Take-off run"] <- "takeoff"
df$flight_phase[df$flight_phase == "Landing Roll"] <- "landing"
df$flight_phase[df$flight_phase == "Approach"] <- "landing"
df$flight_phase[df$flight_phase == "Descent"] <- "inflight"
df$flight_phase[df$flight_phase == "Taxi"] <- "unknown"
df$flight_phase[df$flight_phase == "Parked"] <- "unknown"
df$flight_phase[df$flight_phase == ""] <- "unknown"
df <- df[!(grepl("MILITARY", df$airline)), ]
#remove records that has no flight information
df <- df[complete.cases(df),]
#add value "unknown" for empty airport and airline
df$airport <- ifelse(is.na(df$airport), "unknown", df$airport)
df$airline <- ifelse(is.na(df$airline), "unknown", df$airline)
#re-define the pilot value
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- TRUE
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- FALSE
#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#populate the table - conditions
conditions_df <-data.frame(condition = unique(df$sky_conditions))
conditions_df <- cbind(cid = 1:nrow(conditions_df), conditions_df)
conditions_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#add value "unknown" for empty airport and airline
incidents_df$origin <- ifelse(is.na(incidents_df$origin), "unknown", incidents_df$origin)
incidents_df$airline <- ifelse(is.na(incidents_df$airline), "unknown", incidents_df$airline)
#re-define the pilot value
incidents_df$flightPhase[incidents_df$flightPhase == "Y"] <- TRUE
incidents_df$flightPhase[incidents_df$flightPhase == "N"] <- FALSE
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
library(ggplot2)
query <- "
SELECT YEAR(date) as year, COUNT(*) as incidentsNumber
FROM incidents
WHERE YEAR(date) BETWEEN 2005 AND 2011
GROUP BY year;"
incidentsYearly <- dbGetQuery(dbcon, query)
ggplot(incidentsYearly, aes(x = year, y = incidentsNumber))  + geom_col() + labs(title = "Incidents Number from 2005 to 2011", x = "Year", y = "Number of Incidents")
dbDisconnect(dbcon)
#re-define the pilot value
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- "TRUE"
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- "FALSE"
#populate the airports table
airports_df <- data.frame(airportName=df$airport, state=df$origin)
airports_df <- airports_df[!duplicated(airports_df), ]
airports_df <- cbind(aid = 1:nrow(airports_df), airports_df)
airports_df
#add value "unknown" for empty airport and airline
df$airport <- ifelse(is.na(df$airport), "unknown", df$airport)
df$airline <- ifelse(is.na(df$airline), "unknown", df$airline)
#populate the table - conditions
conditions_df <-data.frame(condition = unique(df$sky_conditions))
conditions_df <- cbind(cid = 1:nrow(conditions_df), conditions_df)
conditions_df
#populate the table - incidents
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
incidents_df$flightPhase[incidents_df$flightPhase == "Climb"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Take-off run"] <- "takeoff"
incidents_df$flightPhase[incidents_df$flightPhase == "Landing Roll"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Approach"] <- "landing"
incidents_df$flightPhase[incidents_df$flightPhase == "Descent"] <- "inflight"
incidents_df$flightPhase[incidents_df$flightPhase == "Taxi"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == "Parked"] <- "unknown"
incidents_df$flightPhase[incidents_df$flightPhase == ""] <- "unknown"
#1-G:Remove all military flights
incidents_df <- incidents_df[!(grepl("MILITARY", incidents_df$airline)), ]
#add value "unknown" for empty airport and airline
incidents_df$origin <- ifelse(is.na(incidents_df$origin), "unknown", incidents_df$origin)
incidents_df$airline <- ifelse(is.na(incidents_df$airline), "unknown", incidents_df$airline)
#re-define the pilot value
incidents_df$flightPhase[incidents_df$flightPhase == "Y"] <- "TRUE"
incidents_df$flightPhase[incidents_df$flightPhase == "N"] <- "FALSE"
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
incidents_df
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
library(DBI)
library(RMySQL)
library(dplyr)
db_user <- 'root'
db_password <- rstudioapi::askForPassword()
db_name <- 'Practicum1'
db_host <- 'localhost'
db_port <- 3306
dbcon <-  dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
library(ggplot2)
query <- "
SELECT YEAR(date) as year, COUNT(*) as incidentsNumber
FROM incidents
WHERE YEAR(date) BETWEEN 2005 AND 2011
GROUP BY year;"
incidentsYearly <- dbGetQuery(dbcon, query)
ggplot(incidentsYearly, aes(x = year, y = incidentsNumber))  + geom_col() + labs(title = "Incidents Number from 2005 to 2011", x = "Year", y = "Number of Incidents")
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
df$flight_phase[df$flight_phase == "Climb"] <- "takeoff"
df$flight_phase[df$flight_phase == "Take-off run"] <- "takeoff"
df$flight_phase[df$flight_phase == "Landing Roll"] <- "landing"
df$flight_phase[df$flight_phase == "Approach"] <- "landing"
df$flight_phase[df$flight_phase == "Descent"] <- "inflight"
df$flight_phase[df$flight_phase == "Taxi"] <- "unknown"
df$flight_phase[df$flight_phase == "Parked"] <- "unknown"
df$flight_phase[df$flight_phase == ""] <- "unknown"
# 1-E: Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown.
df$flight_phase[df$flight_phase == "Climb"] <- "takeoff"
df$flight_phase[df$flight_phase == "Take-off run"] <- "takeoff"
df$flight_phase[df$flight_phase == "Landing Roll"] <- "landing"
df$flight_phase[df$flight_phase == "Approach"] <- "landing"
df$flight_phase[df$flight_phase == "Descent"] <- "inflight"
df$flight_phase[df$flight_phase == "Taxi"] <- "unknown"
df$flight_phase[df$flight_phase == "Parked"] <- "unknown"
df$flight_phase[df$flight_phase == ""] <- "unknown"
unique(df$flight_phase)
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- "TRUE"
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- "FALSE"
incidents_df <- data.frame(rid = df$rid, date = df$flight_date, origin = df$airport, airline = df$airline, aircraft = df$aircraft, flightPhase = df$flight_phase, altitude = df$altitude_ft, conditions = df$sky_conditions,
warning = df$pilot_warned_flag)
#format the date
incidents_df$date <- as.Date(incidents_df$date, format = "%m/%d/%Y")
#match the foreign key - origin
incidents_df <- incidents_df %>%
left_join(airports_df %>% select(aid, airportName), by = c("origin" = "airportName")) %>%
select(rid, date, origin = aid, airline, aircraft, flightPhase, altitude, conditions, warning)
#match the foreign key - condition
incidents_df <- incidents_df %>%
left_join(conditions_df %>% select(cid, condition), by = c("conditions" = "condition")) %>%
select(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions = cid, warning)
dbSendQuery(dbcon, "SET GLOBAL local_infile = true;")
dbWriteTable(dbcon, "incidents", incidents_df, append = TRUE, row.names = FALSE)
dbWriteTable(dbcon, "airports", airports_df, append = T,row.names=FALSE)
dbWriteTable(dbcon, "conditions", conditions_df, append = T,row.names=FALSE)
df$pilot_warned_flag[df$pilot_warned_flag == "Y"] <- TRUE
df$pilot_warned_flag[df$pilot_warned_flag == "N"] <- FALSE
